/**
 * @file version.h
 * @brief 版本控制
 * @author hjroyal
 * @version 1.0.0
 * @date 2025-05-17
 *
 * @copyright Copyright (c) 2025  XXXX
 *
 * @par modification log:
 * <table>
 * <tr><th>Date           <th>Version   <th>Author      <th>Description
 * <tr><td>2025-05-17     <td>1.0       <td>hjroyal     <td>First creation
 * </table>
 */

#ifndef APP_VERSION_H
#define APP_VERSION_H

#include "common.h"
#include <time.h>
//*****************************************************************************
//
// If building with a C++ compiler, make all of the definitions in this header
// have a C binding.
//
//*****************************************************************************
#ifdef __cplusplus
extern "C" {
#endif


//-------------------------------------------------//
// 1.Product type                                    //
//-------------------------------------------------//
#define PRODUCT_5V20A 1
#define PRODUCT_5V40A 2
#define PRODUCT_5V80A 3
#define VER_PRODUCT   PRODUCT_5V80A

//-------------------------------------------------//
// 2.Hardware type                                   //
//-------------------------------------------------//
#define HW_A 1
#define HW_B 2
#define HW_C 3

#define VER_HARDWARE HW_A

//-------------------------------------------------//
// 3.Firmware type                                   //
//-------------------------------------------------//
#define VER_FIRMWARE ("V1.0.0.20231028_base")





typedef struct {
    unsigned major;       // 主版本号
    unsigned minor;       // 副版本号
    unsigned patch;       // 修订版本号
    char date[9];         // 日期版本号（格式YYYYMMDD）
    const char* greek;    // 希腊字母版本号（base/alpha/beta/RC/release）
} APP_VERSION;




//*****************************************************************************
//
// Mark the end of the C bindings section for C++ compilers.
//
//*****************************************************************************
#ifdef __cplusplus
}
#endif


#endif // VERSION_H

/**
 * @brief note:版本命名规则参考
 *        V1.0.0.20231028_base

* 第一位：版本前缀（V1.0.0.20211028_base）
*         V （version）英文版本的缩写
* 第二位：主版本号（V1.0.0.20211028_base）
*         当功能模块有较大的变动，比如增加模块或是整体架构发生变化。此版本号由项目经理决定是否修改。
* 第三位：副版本号（V1.0.0.20211028_base）
*         当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目经理决定是否修改。
* 第四位：修订版本号（V1.0.0.20211028_base）
*         一般是Bug修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。
*         此版本号由项目经理决定是否修改。
* 第五位：日期版本号（V1.0.0.20211028_base）
*         用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。
* 第六位：希腊字母版本号（V1.0.0.20211028_base）
*         希腊字母版本号共有五种，分别为base、alpha、beta 、RC 、 release
*         Base：
*               此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，
*               但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。
*         Alpha ：
*               软件的初级版本，表示该软件在此阶段以实现软件功能为主，通常只在软件开发者内部交流，
*               一般而言，该版本软件的Bug较多，需要继续修改，是测试版本。
*               测试人员提交Bug经开发人员修改确认之后，发布到测试网址让测试人员测试，此时可将软件版本标注为alpha版。
*         Beta ：
*               该版本相对于Alpha版已经有了很大的进步，消除了严重错误，但还需要经过多次测试来进一步消除，
*               此版本主要的修改对象是软件的UI。修改的的Bug
*               经测试人员测试确认后可发布到外网上，此时可将软件版本标注为 beta版。
*         RC ：
*               该版本已经相当成熟了，基本上不存在导致错误的Bug，与即将发行的正式版本相差无几。
*         Release：
*               该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式的版本，
*               是最终交付用户使用的一个版本。该版本有时也称标准版。
***************************************************************************************************************
* Example:
* 产品初始阶段时：V0.1.0.20211021
*               主版本号0，副版本号1，修订版本号0，日期版本号当前日期
* 产品每一次迭代：V0.2.0.20211022
*               主版本号0，更新副版本号+1，修订版本号归0，日期版本号更新当前日期
* 产品优化、修复bug：V0.2.1.20211023
*               主版本号0，副版本号不变2，修订版本号+1，日期版本号更新当前日期
* 产品主版本上线时：V1.0.0.20211024
*               主版本号1，副版本号归0，修订版本号归0，日期版本号更新当前日期
*/